# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/12_markdown.obsidian.personal.index_notes.ipynb.

# %% auto 0
__all__ = ['subsections_listed_in_index_note', 'subsection_folders']

# %% ../../../../nbs/12_markdown.obsidian.personal.index_notes.ipynb 3
import glob
from natsort import natsorted
import os
from os import PathLike
from pathlib import Path
import re
from trouver.markdown.markdown.file import (
    MarkdownFile, MarkdownLineEnum
)
from ...markdown.heading import heading_title
from trouver.markdown.obsidian.links import (
    find_links_in_markdown_text, ObsidianLink, links_from_text
)
from trouver.markdown.obsidian.vault import (
    VaultNote, note_name_unique, note_path_by_name
)
from typing import Union

# %% ../../../../nbs/12_markdown.obsidian.personal.index_notes.ipynb 7
def subsections_listed_in_index_note(
        index_note: Union[VaultNote, str], # The index note
        vault: PathLike
        ) -> dict[Union[int, str], [dict, str]]: # The keys are 1. line numbers and 2. `'title'`. The values are dict and str (the blank str if root node), respectively.
    """
    Return subsections/subchapters as listed in the index note

    **Parameters**
    - `index_note` - VaultNote or str
    - `vault` - Pathlike

    **Returns**
    - dict[Union[int, str], [dict, str]]
        
    """
    vault = Path(vault)
    if isinstance(index_note, str):
        index_note = VaultNote(vault, name=index_note)
    mf_file = MarkdownFile.from_vault_note(index_note)
    return mf_file.get_headings_tree()

# %% ../../../../nbs/12_markdown.obsidian.personal.index_notes.ipynb 8
def subsection_folders(
        index_note: Union[VaultNote, str],
        vault: PathLike,
        data_type: str) -> list[str]:
    """Returns subdirectories corresponding to subsections/subchapters, i.e.
    the folders in the same directory as the index note.
    
    **Parameters**
    - `index_note` - VaultNote or str
        - The (unique) name of the index note in the vault.
    - `vault` - PathLike
    - `data_type` - str
        - `'absolute_path'`, `'relative_path'`, or `'name'`
    
    **Returns**
    - list[str]
        - List of immediate subdirectories in the directory containing the
        index note.
    """
    vault = Path(vault)
    if isinstance(index_note, str):
        index_note = VaultNote(vault, name=index_note)
    parent_directory = (vault / index_note.rel_path).parent
    print(str(parent_directory))
    glob_result = list(glob.glob(str(parent_directory) + '/**/'))
    if data_type == 'absolute_path':
        return glob_result
    elif data_type == 'relative_path':
        return [str(Path(dir).relative_to(vault)) for dir in glob_result]
    elif data_type == 'name':
        return [Path(dir).name for dir in glob_result]
    
