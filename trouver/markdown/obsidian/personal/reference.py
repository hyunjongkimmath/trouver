# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb.

# %% auto 0
__all__ = ['index_note_for_reference', 'reference_directory', 'copy_obsidian_configs']

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 2
import glob
import os
from os import PathLike
from pathlib import Path
import re
import shutil
from typing import Union, Optional
import warnings

from trouver.helper import (
    path_name_no_ext, alphabet_to_alphabet_group
)
from trouver.markdown.markdown.file import (
    MarkdownFile, MarkdownLineEnum
)
from trouver.markdown.markdown.heading import (
    heading_title
)
from trouver.markdown.obsidian.links import (
    ObsidianLink, LinkType, links_from_text
)
from .authors import find_author_file
from trouver.markdown.obsidian.personal.index_notes import ( 
    convert_title_to_folder_name
)
from trouver.markdown.obsidian.personal.notes import (
    notes_linked_in_note
)
from trouver.markdown.obsidian.personal.note_type import (
    type_of_note, PersonalNoteTypeEnum
)
from trouver.markdown.obsidian.vault import(
    VaultNote, all_note_paths_by_name, note_path_by_name,
    NoteDoesNotExistError, NoteNotUniqueError
)

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 5
def index_note_for_reference(
        vault: PathLike, # The vault in which the reference folder resides.
        reference: Union[str, Path] # - The reference. Is either - a str, in which case the reference folder will be the folder containing the (unique) note of the name `_index_{reference}.md`, - or a `Path` object (not just a pathlike!) relative to `vault`, in which case the path will be the path to the reference folder. 
        ) -> VaultNote:
    """
    Returns the index note of the specified reference in the vault.
    
    Assumes that the reference folder has an index note named
    `_index_{reference_name}.md` and this note is the unique note in the vault
    with this filename.
    
    **Raises**

    - TypeError
        - If `reference` is not a str or PathLike.
    - NoteDoesNotExistError
        - If a note of the name `_index_{reference_name}.md` does not exist
        in the vault.
    """
    if (not isinstance(reference, str)
            and not isinstance(reference, PathLike)):
        raise TypeError(
            "Expected `reference` to be a str or a PathLike, but got"
            f" {type(reference)} instead.")
    if isinstance(reference, str):
        reference_name = reference
        index_note = VaultNote(vault, name=f'_index_{reference_name}')
    elif isinstance(reference, PathLike):
        reference_name = Path(reference).name
        index_note = VaultNote(
            vault, rel_path=Path(reference) / f'_index_{reference_name}.md')
    return index_note



# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 8
def reference_directory(
        vault: PathLike, # The vault in which the reference folder resides.
        reference: Union[str, Path] # - The reference. Is either - a str, in which case the reference folder will be the folder containing the (unique) note of the name `_index_{reference}.md`, - or a `Path` object (not just a pathlike!) relative to `vault`, in which case the path will be the path to the reference folder. 
        ) -> Path: # Relative to `vault`.
    """
    Returns the path to the reference directory in a vault.
    
    Assumes that the reference folder has an index note named
    `_index_{reference_name}.md`, this note is the unique note in the vault
    with this filename, and the cache in the `VaultNote` class for `vault` is
    updated.

    **Raises**

    - TypeError
        - If `reference` is not a str or PathLike.
    - 
    
    """
    index_note = index_note_for_reference(vault, reference)
    if index_note.exists(update_cache=False):
        return Path(index_note.path(relative=True)).parent
    else:
        raise NoteDoesNotExistError.from_note_name(index_note.name)

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 19
def _make_reference_folder(
        vault: Path, location: PathLike, reference_name: str,
        reference_directory: PathLike, overwrite: Union[str, None], verbose: bool) -> None:
    """Makes a folder of a specified name in the specified directory.
    
    If `overwrite` is `'w'`, then the reference folder is assumed to not
    exist.

    This method is Intended for making a reference folder for an Obsidian
    vault.
    
    **Parameters**
    - vault - PathLike
        - The path to the Obsidian vault in which to make the reference folder.
    - location - PathLike
        - The directory of the parent of the new folder to be made, relative
        to `vault`. 
    - reference_name - str
        - The name of the reference to be created; the folder's name will be
        this string.
    - reference_directory - PathLike
        - Is `location / reference_name`; in particular, this is a path
        relative to `vault`.
    - overwrite - `'w'`, `'a'`, or `None`.
        - Specifies if and how to overwrite the reference folder if it already
        exists.
            - If `'w'`, then the reference folder is assumed to not exist, and
            the reference folder is created.
            - If `'a'`, then the reference folder may or may not exist, and the
            reference folder is created if it does not exist.
            - If `None`, then the reference folder may or may not exist. If the
            reference folder exists, then a `FileExistsError` is raised. If the
            reference folder does not exist, then it is created.
    - verbose - bool
        - If `True`, print messages.
        
    **Raises**
    - FileNotFoundError
        - If `location` does not exist as a path relative to `vault`.
    - FileExistsError
        - If the reference folder already exists and 1. overwrite is `'w'` or
        2. overwrite is `'None'`. The former case is expected to not happen.
    """
    if verbose:
        print(f"Attempting to create a the folder '{reference_directory}'"
              f" in the directory '{vault / location}.'")

    if not os.path.exists(vault / location):
        raise FileNotFoundError(
            f"Attempted to create a reference folder at {vault / reference_directory}"
            f", but the parent directory {vault / location} does not" 
            " exist.")
    if os.path.exists(vault / reference_directory):
        if overwrite in ['w', None]:
            raise FileExistsError(
                "Attempted to create a reference folder at"
                f" {reference_directory}, but this directory already exists.")
    else:
        os.mkdir(vault / reference_directory)


# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 21
def _chapter_titles(chapters: list[Union[str, list[str]]]) -> list[str]:
    """
    Return the list of chapters of a reference from a formatted list of chapters
    and sections.

    **Parameters**
    - chapters - list[Union[str, list[str]]]
        - A list whose items are str or list of str. If an item is a string, then the
        item is the title of a chapter of the reference. If an item is a list of string,
        then the item contains the title of the chapter of the reference as its index-0
        item, and the titles of the sections for the chapter.

    **Returns**
     - list[str]
    """
    return [chapter if isinstance(chapter, str) else chapter[0] for chapter in chapters]

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 23
def _make_index_file(
        vault: PathLike, reference_directory: PathLike, reference_name: str,
        chapters: list[Union[str, list[str]]]) -> None:
    """
    Create the index file for the reference folder.

    The newly created index file will have a bulleted list of Obsidian links to the
    index files of the chapters/sections of the reference.

    **Parameters**
    - vault - PathLike
    - reference_directory - PathLike
    - reference_name - str
    - chapters - list[Union[str, list[str]]]
        - A list whose items are str or list of str. If an item is a string, then the
        item is the title of a chapter of the reference. If an item is a list of string,
        then the item contains the title of the chapter of the reference as its index-0
        item, and the titles of the sections for the chapter.
    """
    index_note = VaultNote(vault, rel_path = reference_directory / f'_index_{reference_name}.md')
    index_note.create()
    chapter_titles = _chapter_titles(chapters)

    chapter_bullets = [f'- [[_index_{convert_title_to_folder_name(chapter_title)}]]'
                        for chapter_title in chapter_titles]
    mf = MarkdownFile.from_list(chapter_bullets)
    mf.write(index_note)

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 25
def _make_chapter_folders_and_indices(
        chapters: list[Union[str, list[str]]],
        vault: PathLike,
        reference_directory: PathLike) -> None:
    chapter_titles = _chapter_titles(chapters)
    for chapter_title, chapter_sections in zip(chapter_titles, chapters):
        _make_single_chapter_folders(chapter_sections, chapter_title, reference_directory)
        _make_single_chapter_index(chapter_sections, chapter_title, reference_directory)

def _make_single_chapter_folders(
        chapter_sections: Union[str, list[str]],
        chapter_title: str,
        vault: Path,
        reference_directory: PathLike):
    chapter_title = convert_title_to_folder_name(chapter_title)
    os.mkdir(vault / reference_directory / chapter_title)

    if not isinstance(chapter_sections, list):  # i.e. chapter does not have sections
        return
    subchapter_titles = chapter_sections[1:]
    for subchapter_title in subchapter_titles:
        os.mkdir(vault / reference_directory / chapter_title /\
                    convert_title_to_folder_name(subchapter_title))


def _make_single_chapter_index(
        chapter_sections: Union[str, list[str]],
        chapter_title: str,
        vault: Path,
        reference_directory: PathLike):
    chapter_title = convert_title_to_folder_name(chapter_title)
    chapter_index_note = VaultNote(
        vault, rel_path=reference_directory / chapter_title\
        / f"_index_{chapter_title}.md")
    chapter_index_note.create()

    subchapter_titles = chapter_sections[1:]
    headings = [f'# {subchapter_title}\n\n\n'
                for subchapter_title in subchapter_titles]
    mf = MarkdownFile.from_list(headings)
    mf.write(chapter_index_note)

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 27
def _make_reference_file(
        reference_name, references_folder,
        vault,
        authors, author_files) -> None:
    """
    The references folder has subfolders 'A-E', 'F-J', etc. each of which contains
    subfolders for each letter in the English alphabet, each of which in turn contains
    reference notes
    """
    if not os.path.exists(vault / references_folder):
        raise FileNotFoundError(
            f"References folder does not exist: {vault / references_folder}")

    if reference_name[0].isalpha():
        alphabet_group = alphabet_to_alphabet_group(reference_name[0])
        folder_to_make_reference_file = references_folder\
            / alphabet_group / reference_name[0].upper()
    else:
        folder_to_make_reference_file = references_folder
    reference_file_path = folder_to_make_reference_file\
        / f'_reference_{reference_name}.md'
    VaultNote(vault, rel_path=reference_file_path).create()
    # TODO author stuff

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 29
def _manifest_template_file(
        template_file_name: str,
        reference_name: str,
        vault: PathLike,
        authors: Union[str, list[str]])\
        -> MarkdownFile:
    """
    Return a `MarkdownFile` object based on a specified template file
    with some information about the reference added.

    **Parameters**
    - template_file_name: str
        - The template file's name. This is assumed to be unique in
        the vault.
    - reference_name: str
    - vault: PathLike
    - authors: Union[str, list[str]]

    **Returns**
    - MarkdownFile

    **Raises**
    - NoteNotUniqueError
        - If the template file's name is not unique in the vault.
    - NoteDoesNotExistError
        - If a note with the template file's name does not exist in the
        vault.
    """
    # TODO: sort authors by alphabetical order
    if isinstance(authors, str):
        authors = [authors]
    # TODO: get MarkdownFile by VaultNote
    # template_file_path = note_path_by_name(template_file_name, vault)
    # template_file = MarkdownFile.from_file(
    #     Path(vault) / template_file_path)
    template_file = MarkdownFile.from_vault_note(
        VaultNote(vault, name=template_file_name))
    embedding_link = ObsidianLink(is_embedded=True,
        file_name=f'_reference_{reference_name}',
        anchor=0, custom_text=0, link_type = LinkType.WIKILINK)
    template_file.add_line_in_section(
        title="References",
        line_dict={'type': MarkdownLineEnum.DEFAULT,
                   'line': f'{embedding_link.to_string()}\n'})

    last_line = template_file.pop_line()
    last_line['line'] = f'[^1]: {", ".join(authors)}, '
    template_file.add_line_to_end(last_line)

    # TODO: delete the below
    # ref_line_index = template_file.get_line_number_of_heading(
    #     title="References")
    # embedding_link = ObsidianLink(is_embedded=True,
    #     file_name=f'_reference_{reference_name}',
    #     anchor=0, custom_text=0, link_type = LinkType.WIKILINK)
    # template_file.insert_line(
    #     ref_line_index+1, {'type': MarkdownLineEnum.DEFAULT,
    #                        'line': f'{embedding_link.to_string()}\n'})

    # TODO: make sure the above line works and delete the below line
    # template_file.parts.insert(ref_line_index+1, {'type': MarkdownLineEnum.DEFAULT,
    #                        'line': f'{embedding_link.to_string()}\n'})
    template_file.add_tags([f'#_reference/{reference_name}'])
    return template_file

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 31
def _make_template_file(
        template_file_name,
        reference_name,
        vault,
        templates_folder,
        authors: Union[str, list[str]]) -> None:
    template_file = _manifest_template_file(
        template_file_name, reference_name, vault, authors)

    # TODO factor out; this repeats with code in _make_reference_file above.
    if not os.path.exists(vault / templates_folder):
        raise FileNotFoundError(
            f"References folder does not exist: {vault / templates_folder}")
    if reference_name[0].isalpha():
        alphabet_group = alphabet_to_alphabet_group(reference_name[0])
        folder_to_make_template_file = Path(templates_folder)\
            / alphabet_group / reference_name[0].upper()
    else:
        folder_to_make_template_file = Path(templates_folder)

    template_file_path = folder_to_make_template_file\
        / f'_template_{reference_name}.md'
    VaultNote(vault, rel_path=template_file_path).create()

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 33
def _make_notation_index_file(
        reference_directory: PathLike,
        reference_name: str,
        vault: PathLike,
        notation_index_template_file_name: str) -> None:
    """Create the notation index file for the reference.

    The notation index file is named `_notation_{reference_name}.md`, and is
    located in the main directory of the new reference.

    **Parameters**
    - reference_directory - PathLike
        - The main directory of the reference. Relative to `vault`.
    - reference_name - str
    - vault - PathLike
    - notation_index_template_file_name - str
        - The template file whose contents will fill the newly created notation
        index file.
    
    **Raises**
    - NoteNotUniqueError
        - If the template file's name is not unique in the vault.
    - NoteDoesNotExistError
        - If a note with the template file's name does not exist in the
        vault.
    """
    template_file = _manifest_template_file(
        notation_index_template_file_name, reference_name, vault)
    notation_index_file_path = Path(reference_directory)\
        / f'_notation_{reference_name}.md'
    notation_index_note = VaultNote(vault, rel_path=notation_index_file_path)
    notation_index_note.create()
    template_file.write(notation_index_note)

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 35
# TODO: change "file" in these helper methods and their respective doccstrings to "note"
def _make_glossary_file(
        reference_directory: PathLike, reference_name: str, vault: PathLike,
        glossary_template_file_name: str) -> None:
    """Create the glossary file for the reference.

    The notation index file is named `_glossary_{reference_name}.md`, and is
    located in the main directory of the new reference.

    **Parameters**
    - reference_directory - PathLike
        - The main directory of the reference.
    - reference_name - str
    - vault - PathLike
    - glossary_template_file_name - str
        - The template file whose contents will fill the newly created
        glossary file.
    
    """
    template_note = VaultNote(vault, name=glossary_template_file_name)
    template_file = MarkdownFile.from_vault_note(template_note)
    glossary_file_path = reference_directory / f'_glossary_{reference_name}.md'
    glossary_note = VaultNote(vault, rel_path=glossary_file_path)
    glossary_note.create()

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 37
def _make_temp_folder(
        reference_directory: PathLike, reference_name: str,
        vault: PathLike) -> None:
    """
    Make a folder for temporarily holding notes and a corresponding index file.

    **Parameters**
    - reference_directory - PathLike
    - reference_name - str
    - vault - PathLike

    """

    temp_directory = vault / reference_directory / '_temp'
    os.mkdir(temp_directory)
    # TODO: use vaultnote.create and markdownfile.write
    temp_file_path = reference_directory / '_temp' / f'_index_temp_{reference_name}.md'
    temp_note = VaultNote(vault, rel_path = temp_file_path)
    temp_note.create()

# %% ../../../../nbs/10_markdown.obsidian.personal.reference.ipynb 39
def copy_obsidian_configs(
        vault: Path, reference_directory: PathLike, configs_folder: PathLike) -> None:
    """
    Copies the vault's Obsidian config files into the reference directory.

    **Parameters**
    - reference_directory - PathLike
        - The folder into which to copy the Obsidian configs.
    - configs_folder - PathLike
        - The folder containing the Obsidian configs
    """
    shutil.copytree(configs_folder, vault / reference_directory / '.obsidian')
