# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/49_helper.arxiv.ipynb.

# %% auto 0
__all__ = ['arxiv_search', 'download_from_results']

# %% ../../nbs/49_helper.arxiv.ipynb 1
from typing import Optional, Union
import os
from os import PathLike
from pathlib import Path

import arxiv
from arxiv import Client, Search, Result

from .files_and_folders import file_is_compressed, uncompress_file


# %% ../../nbs/49_helper.arxiv.ipynb 4
def arxiv_search(
        arxiv_ids: Union[str, list[str]], # The ID of a single arXiv article or multiple arxiv articles
        client: Optional[Client] = None,  # an arxiv API Client. If `None`, create one on the spot.
        results: bool = True, # If `True` return a `Result` object. otherwise, return a `Search`` object`.
        ) -> Union[Result, Search]:
    if not client:
        client = Client()
    if not isinstance(arxiv_ids, list):
        arxiv_ids = [arxiv_ids]
    search = Search(id_list=arxiv_ids)
    if results:
        return client.results(search)
    return search
    

def download_from_results(
        results: Result,
        dir: PathLike, # The directory into which to download the files
        source: bool = True, # If `True`, download the source file. Otherweise, download a pdf file.
        # filename: Optional[str] = None, # The file name to save the file as. If `None`, then the filename is set to the arXiv id of the article.
        decompress_compressed_file: bool = True, # If `True`and if `source` is `True`, then decompress the source file after downloading it.
        delete_compressed_file: bool = True, # If `True` and if `source` and `decompress_compressed_file` are `True`, then delete the compressed source file after downloading and then uncompressing it.
        ) -> None:
    """
    """
    for result in results:
        if not source:
            result.download_pdf(dir)
            continue
        source_file_path = result.download_source(dir)
        source_file_path = Path(dir) / source_file_path
        print(source_file_path)
        if decompress_compressed_file and file_is_compressed(source_file_path):
            uncompressed = uncompress_file(source_file_path)
            if delete_compressed_file:
                os.remove(source_file_path)
            if len(uncompressed) == 1 and file_is_compressed(uncompressed[0]):
                uncompressed_again = uncompress_file(uncompressed[0])
                if delete_compressed_file:
                    os.remove(uncompressed[0])

            
