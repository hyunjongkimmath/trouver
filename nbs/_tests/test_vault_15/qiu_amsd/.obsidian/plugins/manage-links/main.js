/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ManageLinks
});
var import_obsidian2 = __toModule(require("obsidian"));

// ManageLinksModal.ts
var import_obsidian = __toModule(require("obsidian"));

// links.ts
var wikilink_re = /!?\[\[([^#\|]*?)(#(.*?))?(\|(.*?))?\]\]/;
var markdown_re = /!?\[([^\]]*)\]\(([^)#]+)(#([^)]+))?\)/;
var LinkType;
(function(LinkType2) {
  LinkType2[LinkType2["Wikilink"] = 0] = "Wikilink";
  LinkType2[LinkType2["Markdown"] = 1] = "Markdown";
})(LinkType || (LinkType = {}));
var ObsidianLink = class {
  constructor(is_embedded, file_name, anchor, custom_text, link_type) {
    this.is_embedded = is_embedded;
    this.file_name = file_name;
    this.anchor = anchor;
    this.custom_text = custom_text;
    this.link_type = link_type;
  }
  static fromText(text) {
    let is_embedded = text.startsWith("!");
    let matches = text.match(wikilink_re);
    let file_name, anchor, custom_text, link_type;
    if (matches) {
      file_name = matches[1];
      anchor = matches[3];
      custom_text = matches[5];
      link_type = 0;
    } else {
      matches = text.match(markdown_re);
      if (!matches) {
      }
      file_name = matches[2].replace("%20", " ");
      anchor = matches[4];
      if (anchor) {
        anchor = anchor.replace("%20", " ");
        custom_text = matches[1];
        link_type = 1;
      }
    }
    if (anchor == void 0) {
      anchor = 0;
    }
    if (custom_text == void 0) {
      custom_text = 0;
    }
    return new ObsidianLink(is_embedded, file_name, anchor, custom_text, link_type);
  }
  displayText() {
    if (this.custom_text) {
      return String(this.custom_text);
    } else {
      return this.file_name;
    }
  }
};

// ManageLinksModal.ts
var ManageLinksModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.changesToMake = {};
  }
  onOpen() {
    let { contentEl } = this;
    const backlinks = getLinkVarieties(this.app, this.app.workspace.getActiveFile());
    contentEl.createEl("h1", { text: "Replace backlinks" });
    for (const linkVariety in backlinks) {
      new import_obsidian.Setting(contentEl).setName(linkVariety).addText((text) => {
        text.setValue(linkVariety);
        text.onChange((value) => {
          this.changesToMake[linkVariety] = value;
        });
      });
    }
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Replace backlinks").setCta().onClick(() => {
      this.close();
      this.onSubmit(backlinks);
      new import_obsidian.Notice("Backlinks replaced!");
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onSubmit(linkVarieties) {
    return __async(this, null, function* () {
      for (const linkVariety in linkVarieties) {
        if (this.changesToMake[linkVariety] == linkVariety || !(linkVariety in this.changesToMake)) {
          continue;
        }
        const re = linkToRegex(linkVariety);
        const filesToChange = linkVarieties[linkVariety];
        for (let file of filesToChange.values()) {
          const tfile = this.app.metadataCache.getFirstLinkpathDest(file, "");
          let fileContent = yield this.app.vault.read(tfile);
          fileContent = fileContent.replace(re, this.changesToMake[linkVariety]);
          yield this.app.vault.modify(tfile, fileContent);
        }
      }
    });
  }
};
function getLinkVarieties(app, forFile) {
  const linkVarieties = {};
  const resolvedLinks = app.metadataCache.resolvedLinks;
  for (const file in resolvedLinks) {
    const fileLinks = resolvedLinks[file];
    if (!(forFile.path in fileLinks)) {
      continue;
    }
    const backLinkFile = app.metadataCache.getFirstLinkpathDest(file, "");
    const fileCache = app.metadataCache.getFileCache(backLinkFile);
    fileCache.links.forEach((link) => {
      const parsedLink = ObsidianLink.fromText(link.original);
      if (app.metadataCache.getFirstLinkpathDest(parsedLink.file_name, "") != forFile) {
        return;
      }
      if (!(link.original in linkVarieties)) {
        linkVarieties[link.original] = new Set();
      }
      linkVarieties[link.original].add(file);
    });
  }
  return linkVarieties;
}
function linkToRegex(link) {
  link = link.replace(/\[/g, "\\[");
  link = link.replace(/\]/g, "\\]");
  link = link.replace(/\(/g, "\\(");
  link = link.replace(/\)/g, "\\)");
  link = link.replace(/\|/g, "\\|");
  return RegExp(link, "g");
}

// main.ts
var ManageLinks = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "manage-file-backlinks",
        name: "Manage file backlinks",
        checkCallback: (checking) => {
          const file = this.app.workspace.getActiveFile();
          if (file) {
            if (!checking) {
              new ManageLinksModal(this.app).open();
            }
            return true;
          }
          return false;
        }
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
    });
  }
};
