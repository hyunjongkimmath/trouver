/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => IndexView
});
var import_obsidian2 = __toModule(require("obsidian"));

// cursorShowView.ts
var import_obsidian = __toModule(require("obsidian"));
var CURSOR_SHOW_VIEW_TYPE = "cursor-show-view";

// ../../../../../Development/javascript/obsidian_plugins/fast-link-edit/navigate.ts
function positionInRange(pos, range, include_from = true, include_to = true) {
  return positionComesBefore(range.from, pos, include_from) && positionComesBefore(pos, range.to, include_to);
}
function positionPairToRange(from, to) {
  const range = {
    from,
    to
  };
  return range;
}
function locPairToRange(from, to) {
  let f = locToEditorPosition(from);
  let t = locToEditorPosition(to);
  return positionPairToRange(f, t);
}
function positionComesBefore(pos, other, allowEqual = false) {
  if (allowEqual) {
    return pos.line < other.line || pos.line == other.line && pos.ch <= other.ch;
  } else {
    return pos.line < other.line || pos.line == other.line && pos.ch < other.ch;
  }
}
function positionComesBeforeLoc(pos, loc, allowEqual = false) {
  return positionComesBefore(pos, locToEditorPosition(loc), allowEqual);
}
function locToEditorPosition(loc) {
  const pos = {
    line: loc.line,
    ch: loc.col
  };
  return pos;
}
function getNextLinkIndex(pos, links, by = "start", reverse = false) {
  if (!links) {
    return -1;
  }
  let i = 0;
  if (!reverse) {
    while (i < links.length && !positionComesBeforeLoc(pos, links[i].position[by], false)) {
      i++;
    }
  } else {
    i = links.length - 1;
    while (-1 < i && positionComesBeforeLoc(pos, links[i].position[by], true)) {
      i--;
    }
  }
  if (-1 < i && i < links.length) {
    return i;
  } else {
    return -1;
  }
}
function getCurrentLinkIndex(pos, links) {
  if (!links) {
    return -1;
  }
  let i = getNextLinkIndex(pos, links);
  if (i == -1) {
    i = links.length - 1;
  } else {
    i--;
  }
  let range = locPairToRange(links[i].position.start, links[i].position.end);
  if (positionInRange(pos, range)) {
    return i;
  }
  i++;
  if (i >= links.length) {
    return -1;
  }
  range = locPairToRange(links[i].position.start, links[i].position.end);
  if (positionInRange(pos, range)) {
    return i;
  } else {
    return -1;
  }
}

// ../../../../../Development/javascript/obsidian_plugins/fast-link-edit/links.ts
var wikilink_re = /!?\[\[([^#\|]*?)(#(.*?))?(\|(.*?))?\]\]/;
var markdown_re = /!?\[([^\]]*)\]\(([^)#]+)(#([^)]+))?\)/;
var LinkType;
(function(LinkType2) {
  LinkType2[LinkType2["Wikilink"] = 0] = "Wikilink";
  LinkType2[LinkType2["Markdown"] = 1] = "Markdown";
})(LinkType || (LinkType = {}));
var ObsidianLink = class {
  constructor(is_embedded, file_name, anchor, custom_text, link_type) {
    this.is_embedded = is_embedded;
    this.file_name = file_name;
    this.anchor = anchor;
    this.custom_text = custom_text;
    this.link_type = link_type;
  }
  static fromText(text) {
    let is_embedded = text.startsWith("!");
    let matches = text.match(wikilink_re);
    let file_name, anchor, custom_text, link_type;
    if (matches) {
      file_name = matches[1];
      anchor = matches[3];
      custom_text = matches[5];
      link_type = 0;
    } else {
      matches = text.match(markdown_re);
      if (!matches) {
      }
      file_name = matches[2].replace("%20", " ");
      anchor = matches[4];
      if (anchor) {
        anchor = anchor.replace("%20", " ");
        custom_text = matches[1];
        link_type = 1;
      }
    }
    if (anchor == void 0) {
      anchor = 0;
    }
    if (custom_text == void 0) {
      custom_text = 0;
    }
    return new ObsidianLink(is_embedded, file_name, anchor, custom_text, link_type);
  }
  displayText() {
    if (this.custom_text) {
      return String(this.custom_text);
    } else {
      return this.file_name;
    }
  }
};

// main.ts
var IndexView = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "open-pane-to-navigate-links-in-current-view",
        name: "Open pane to navigate links in current view",
        hotkeys: [{ modifiers: ["Shift", "Alt"], key: "Enter" }],
        editorCallback: (editor) => __async(this, null, function* () {
          console.log("hello");
          const currentFile = this.app.workspace.getActiveFile();
          const fileCache = this.app.metadataCache.getFileCache(currentFile);
          const index = getCurrentLinkIndex(editor.getCursor(), fileCache.links);
          const file_name = ObsidianLink.fromText(fileCache.links[index].original).file_name;
          const file = this.app.metadataCache.getFirstLinkpathDest(file_name, "");
          yield this.app.workspace.openLinkText("", file.path, true);
          const leaf = this.app.workspace.getLeaf(false);
          leaf.navigateLinkIndex = index;
          leaf.navigateLinks = fileCache.links;
          new import_obsidian2.Notice("New link-navigation pane opened");
        })
      });
      this.addCommand({
        id: "navigate-pane-to-next-link",
        name: "Navigate pane to next link",
        hotkeys: [{ modifiers: ["Shift", "Alt"], key: "ArrowDown" }],
        checkCallback: (checking) => {
          const leaf = this.app.workspace.getLeaf(false);
          if (leaf.hasOwnProperty("navigateLinkIndex")) {
            if (!checking) {
              if (leaf.navigateLinkIndex < leaf.navigateLinks.length - 1) {
                leaf.navigateLinkIndex = leaf.navigateLinkIndex + 1;
                const file_name = ObsidianLink.fromText(leaf.navigateLinks[leaf.navigateLinkIndex].original).file_name;
                const file = this.app.metadataCache.getFirstLinkpathDest(file_name, "");
                if (file) {
                  this.app.workspace.openLinkText("", file.path, false);
                } else {
                  new import_obsidian2.Notice(`${file_name} does not exist.`);
                }
              }
            }
            return true;
          }
          return false;
        }
      });
      this.addCommand({
        id: "navigate-pane-to-previous-link",
        name: "Navigate pane to previous link",
        hotkeys: [{ modifiers: ["Shift", "Alt"], key: "ArrowUp" }],
        checkCallback: (checking) => {
          const leaf = this.app.workspace.getLeaf(false);
          if (leaf.hasOwnProperty("navigateLinkIndex")) {
            if (!checking) {
              if (leaf.navigateLinkIndex > 0) {
                leaf.navigateLinkIndex = leaf.navigateLinkIndex - 1;
                const file_name = ObsidianLink.fromText(leaf.navigateLinks[leaf.navigateLinkIndex].original).file_name;
                const file = this.app.metadataCache.getFirstLinkpathDest(file_name, "");
                if (file) {
                  this.app.workspace.openLinkText("", file.path, false);
                } else {
                  new import_obsidian2.Notice(`${file_name} does not exist.`);
                }
              }
            }
            return true;
          }
          return false;
        }
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("bye");
      this.app.workspace.detachLeavesOfType(CURSOR_SHOW_VIEW_TYPE);
    });
  }
  activateCursorShowView() {
    return __async(this, null, function* () {
      this.app.workspace.detachLeavesOfType(CURSOR_SHOW_VIEW_TYPE);
      const currentFile = this.app.workspace.getActiveFile();
      const fileCache = this.app.metadataCache.getFileCache(currentFile);
      yield this.app.workspace.getLeftLeaf(false).setViewState({
        type: CURSOR_SHOW_VIEW_TYPE,
        active: true
      });
      const leaf = this.app.workspace.getLeavesOfType(CURSOR_SHOW_VIEW_TYPE)[0];
      this.app.workspace.revealLeaf(leaf);
    });
  }
};
